buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.junit.platform:junit-platform-gradle-plugin:1.1.1")
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.15.0'
    id 'com.github.hierynomus.license' version '0.13.1'
    id 'net.researchgate.release' version '2.6.0'
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id 'org.sonarqube' version '2.5'
}

ext {
    apiguardianVersion = '1.0.0'
    commonsCodecVersion = '1.11'
    commonsRdfVersion = '0.5.0'
    logbackVersion = '1.2.3'
    metadataExtractorVersion = '2.11.0'
    xbeamVersion = "1.4.8"
    junitVersion = "5.1.0"
    jacksonVersion = '2.9.1'
    mockitoVersion = '2.10.0'
    jaiImageIoVersion = "1.3.0"
    slf4jVersion = "1.7.25"

    jacocoVersion = '0.8.1'
    checkstyleVersion = '8.8'
}

configure(allprojects) { project ->
    group 'de.ubleipzig'

    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'jacoco'

    idea {
        module {
            outputDir file('build/classes/main')
            testOutputDir file('build/classes/test')
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        moduleName = "de.ubleipzig.iiifproducer"
        vendor = 'UB Leipzig'
        license = 'Apache 2'
    }

    repositories {
        mavenCentral()
        flatDir {
            dirs "$rootProject.projectDir/lib"
        }
    }

    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
        testImplementation("org.apiguardian:apiguardian-api:$apiguardianVersion")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    }

}

subprojects {
    afterEvaluate {
        repositories {
            jcenter()
        }

        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.compilerArgs.add("-Xlint:unchecked")
                options.compilerArgs.add("-Xlint:deprecation")
            }
        }

        compileTestJava {
            doFirst {
                options.compilerArgs = [
                        '-Xlint:deprecation'
                ]
            }
        }
    }

    checkstyle {
        configFile = rootProject.file('buildtools/src/main/resources/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('buildtools/src/main/resources/checkstyle/')
        toolVersion = checkstyleVersion
    }

    license {
        include "**/*.java"
        header rootProject.file('buildtools/src/main/resources/license/HEADER.txt')
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    jacoco {
        toolVersion = jacocoVersion
    }

    tasks.withType(JavaExec) {
        if (it.name == 'junitPlatformTest') {
            doFirst {
                jvmArgs "-javaagent:${configurations.testAgent.singleFile}=destfile=${project.buildDir.name}/jacoco/test.exec"
            }
        }
    }

    configurations {
        testAgent {
            transitive = false
        }
    }

    dependencies {
        testAgent("org.jacoco:org.jacoco.agent:${jacocoVersion}:runtime")
    }
}




